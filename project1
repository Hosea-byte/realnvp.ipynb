import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.datasets import mnist
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt

# Load dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

# Function to create a model
def create_model(activation_function):
    model = Sequential([
        Flatten(input_shape=(28, 28)),
        Dense(128, activation=activation_function),
        Dense(64, activation=activation_function),
        Dense(10, activation='softmax')  # Output layer
    ])
    return model

# Train and evaluate models
activations = ['relu', 'sigmoid', tf.keras.layers.LeakyReLU(alpha=0.01)]
results = {}

for activation in activations:
    print(f"\nTraining with {activation} activation function...")
    model = create_model(activation)
    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])
    history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=128, verbose=1)
    results[str(activation)] = model.evaluate(x_test, y_test, verbose=0)
    plt.plot(history.history['val_accuracy'], label=f'{activation} val_accuracy')

# Plot comparison
plt.title('Validation Accuracy Comparison')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Display results
for activation, result in results.items():
    print(f"{activation}: Loss = {result[0]:.4f}, Accuracy = {result[1]:.4f}")
